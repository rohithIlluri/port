{"version":3,"file":"static/js/0.119acc0a.chunk.js","mappings":"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","sources":["constants/spotify.js","utils/spotify.js","components/sections/Music.js"],"sourcesContent":["// Spotify API configuration\nexport const SPOTIFY_CONFIG = {\n  // You'll need to get these from Spotify Developer Dashboard\n  CLIENT_ID: process.env.REACT_APP_SPOTIFY_CLIENT_ID,\n  CLIENT_SECRET: process.env.REACT_APP_SPOTIFY_CLIENT_SECRET,\n  REDIRECT_URI: process.env.REACT_APP_SPOTIFY_REDIRECT_URI || 'http://localhost:3000/callback',\n};\n\n// Music artists with their Spotify IDs and descriptions\nexport const MUSIC_ARTISTS = [\n  {\n    id: '711MCceyCBcFnzjGY4Q7Un', // AC/DC\n    name: 'AC/DC',\n    description: 'Beer in one hand, Blood in the other',\n    initials: 'AC',\n    spotifyUrl: 'https://open.spotify.com/artist/711MCceyCBcFnzjGY4Q7Un'\n  },\n  {\n    id: '3WrFJ7ztbogyGnTHbHJFl2', // The Beatles\n    name: 'The Beatles',\n    description: 'The best band ever',\n    initials: 'TB',\n    spotifyUrl: 'https://open.spotify.com/artist/3WrFJ7ztbogyGnTHbHJFl2'\n  },\n  {\n    id: '1mYsTxnqsietFxj1OgoGbG', // A.R. Rahman\n    name: 'A.R. Rahman',\n    description: 'Musical Maestro',\n    initials: 'AR',\n    spotifyUrl: 'https://open.spotify.com/artist/1mYsTxnqsietFxj1OgoGbG'\n  },\n  {\n    id: '6XyY86QOPPrYVGvF9ch6wz', // Linkin Park\n    name: 'Linkin Park',\n    description: 'RIP Chester Bennington',\n    initials: 'LP',\n    spotifyUrl: 'https://open.spotify.com/artist/6XyY86QOPPrYVGvF9ch6wz'\n  }\n];\n\n// Spotify API endpoints\nexport const SPOTIFY_ENDPOINTS = {\n  ARTIST: 'https://api.spotify.com/v1/artists',\n  SEARCH: 'https://api.spotify.com/v1/search',\n};\n","import { SPOTIFY_ENDPOINTS } from '../constants/spotify';\n\n// Get Spotify access token (you'll need to implement OAuth flow)\nexport const getSpotifyAccessToken = async () => {\n  // For now, return null - you'll need to implement OAuth\n  // This is a placeholder for the actual OAuth implementation\n  return null;\n};\n\n// Fetch artist data from Spotify\nexport const fetchArtistData = async (artistId) => {\n  try {\n    const token = await getSpotifyAccessToken();\n    \n    if (!token) {\n      // Return basic artist data when no token\n      console.log(`No Spotify token for ${artistId}, using basic data`);\n      return {\n        id: artistId,\n        name: 'Artist',\n        images: [],\n        external_urls: { spotify: 'https://open.spotify.com' }\n      };\n    }\n\n    const response = await fetch(`${SPOTIFY_ENDPOINTS.ARTIST}/${artistId}`, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json',\n      },\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to fetch artist data');\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching artist data:', error);\n    // Return basic artist data on error\n    return {\n      id: artistId,\n      name: 'Artist',\n      images: [],\n      external_urls: { spotify: 'https://open.spotify.com' }\n    };\n  }\n};\n\n// Get artist image URL\nexport const getArtistImageUrl = (artistData, size = 'medium') => {\n  if (!artistData || !artistData.images || artistData.images.length === 0) {\n    console.log('No images found in artist data:', artistData);\n    return null;\n  }\n\n  const imageUrl = artistData.images[0].url;\n  console.log(`Getting image URL for artist ${artistData.id}:`, imageUrl);\n\n  // Return appropriate image size\n  if (size === 'small' && artistData.images.length > 1) {\n    return artistData.images[1].url; // Second image is usually smaller\n  }\n  \n  return imageUrl; // First image is usually the largest\n};\n","import React, { memo, useState, useEffect } from 'react';\nimport { COMPONENT_STYLES } from '../../constants/theme';\nimport { MUSIC_ARTISTS } from '../../constants/spotify';\nimport { fetchArtistData, getArtistImageUrl } from '../../utils/spotify';\n\n// Local image mapping using public folder (no import issues)\nconst LOCAL_ARTIST_IMAGES = {\n  '711MCceyCBcFnzjGY4Q7Un': '/artists/ac-dc.jpg', // ac/dc\n  '3WrFJ7ztbogyGnTHbHJFl2': '/artists/the-beatles.jpg', // The Beatles\n  '1mYsTxnqsietFxj1OgoGbG': '/artists/ar-rahman.jpg', // A.R. Rahman\n  '6XyY86QOPPrYVGvF9ch6wz': '/artists/linkin-park.jpg', // Linkin Park\n};\n\nconst Music = () => {\n  const [artistsData, setArtistsData] = useState({});\n\n  useEffect(() => {\n    const fetchArtistsData = async () => {\n      const data = {};\n      for (const artist of MUSIC_ARTISTS) {\n        data[artist.id] = await fetchArtistData(artist.id);\n        console.log(`Artist ${artist.name} data:`, data[artist.id]);\n      }\n      setArtistsData(data);\n      console.log('All artists data:', data);\n    };\n\n    fetchArtistsData();\n  }, []);\n\n  const handleArtistClick = (spotifyUrl) => {\n    window.open(spotifyUrl, '_blank', 'noopener,noreferrer');\n  };\n\n  return (\n    <section id=\"music\" className={COMPONENT_STYLES.section.base} aria-label=\"Music section\">\n      <div className={COMPONENT_STYLES.section.container}>\n        <h2 className={COMPONENT_STYLES.section.heading}>Music</h2>\n       \n        <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-6\">\n          {MUSIC_ARTISTS.map((artist) => {\n            const artistData = artistsData[artist.id];\n            const imageUrl = artistData && artistData.images && artistData.images.length > 0 ? getArtistImageUrl(artistData, 'small') : LOCAL_ARTIST_IMAGES[artist.id];\n            \n            return (\n              <div \n                key={artist.id}\n                onClick={() => handleArtistClick(artist.spotifyUrl)}\n                className=\"flex items-center space-x-6 p-8 bg-gray-100 rounded-lg hover:bg-gray-200 transition-colors cursor-pointer group min-h-[140px]\"\n              >\n                {imageUrl ? (\n                  <img \n                    src={imageUrl} \n                    alt={`${artist.name} poster`}\n                    className=\"w-24 h-24 rounded-full object-cover shadow-sm\"\n                    onError={(e) => {\n                      console.log('Image failed to load:', imageUrl);\n                      e.target.style.display = 'none';\n                      e.target.nextSibling.style.display = 'flex';\n                    }}\n                    onLoad={(e) => {\n                      console.log('Image loaded successfully:', imageUrl);\n                    }}\n                  />\n                ) : null}\n                <div className={`w-24 h-24 bg-gray-200 rounded-full flex items-center justify-center text-gray-700 text-3xl font-bold ${imageUrl ? 'hidden' : 'flex'}`}>\n                  {artist.initials}\n                </div>\n                <div className=\"flex-1\">\n                  <h3 className=\"font-bold text-black text-xl mb-2\">{artist.name}</h3>\n                  <p className=\"text-gray-600 text-lg leading-relaxed\">{artist.description}</p>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default memo(Music);\n"],"names":["MUSIC_ARTISTS","id","name","description","initials","spotifyUrl","SPOTIFY_ENDPOINTS","fetchArtistData","async","token","getSpotifyAccessToken","console","log","concat","artistId","images","external_urls","spotify","response","fetch","headers","ok","Error","json","error","LOCAL_ARTIST_IMAGES","Music","artistsData","setArtistsData","useState","useEffect","data","artist","fetchArtistsData","_jsx","className","COMPONENT_STYLES","section","base","children","_jsxs","container","heading","map","artistData","imageUrl","length","size","arguments","undefined","url","getArtistImageUrl","onClick","handleArtistClick","window","open","src","alt","onError","e","target","style","display","nextSibling","onLoad","memo"],"sourceRoot":""}