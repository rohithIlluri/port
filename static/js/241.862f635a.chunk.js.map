{"version":3,"file":"static/js/241.862f635a.chunk.js","mappings":"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","sources":["constants/tmdb.js","utils/tmdb.js","components/sections/FavoriteMovies.js"],"sourcesContent":["// TMDB (The Movie Database) API configuration\nexport const TMDB_CONFIG = {\n  API_KEY: process.env.REACT_APP_TMDB_API_KEY,\n  BASE_URL: 'https://api.themoviedb.org/3',\n  IMAGE_BASE_URL: 'https://image.tmdb.org/t/p/w500',\n  IMAGE_BASE_URL_SMALL: 'https://image.tmdb.org/t/p/w200',\n};\n\n// Favorite movies with their TMDB IDs and descriptions\nexport const FAVORITE_MOVIES = [\n  {\n    id: 24, // Kill Bill: Vol. 1\n    name: 'Kill Bill: Vol. 1',\n    description: 'swords and revenge',\n    initials: 'KB',\n    tmdbUrl: 'https://www.themoviedb.org/movie/24-kill-bill-vol-1',\n    year: 2003\n  },\n  {\n    id: 155, // The Dark Knight\n    name: 'The Dark Knight',\n    description: 'Epic superhero masterpiece',\n    initials: 'TD',\n    tmdbUrl: 'https://www.themoviedb.org/movie/155',\n    year: 2008\n  },\n  {\n    id: 157336, // Interstellar\n    name: 'Interstellar',\n    description: 'Space exploration epic',\n    initials: 'IN',\n    tmdbUrl: 'https://www.themoviedb.org/movie/157336',\n    year: 2014\n  },\n  {\n    id: 680, // Pulp Fiction\n    name: 'Pulp Fiction',\n    description: 'Quentin Tarantino classic',\n    initials: 'PF',\n    tmdbUrl: 'https://www.themoviedb.org/movie/680',\n    year: 1994\n  }\n];\n\n// TMDB API endpoints\nexport const TMDB_ENDPOINTS = {\n  MOVIE: '/movie',\n  SEARCH: '/search/movie',\n};\n","import { TMDB_CONFIG, TMDB_ENDPOINTS } from '../constants/tmdb';\n\n// Local movie poster images (fallback when API is not available)\nconst MOVIE_POSTERS = {\n  24: 'https://image.tmdb.org/t/p/original/9yaVKBwvbvq3qL8zzSmuoxZuoFK.jpg', // Kill Bill: Vol. 1 - local image\n  155: 'https://image.tmdb.org/t/p/w500/qJ2tW6WMUDux911r6m7haRef0WH.jpg', // The Dark Knight\n  157336: '/artists/interstellar.jpeg', // Interstellar - local image\n  680: 'https://image.tmdb.org/t/p/w500/d5iIlFn5s0ImszYzBPb8JPIfbXD.jpg', // Pulp Fiction\n};\n\n// Fetch movie data from TMDB\nexport const fetchMovieData = async (movieId) => {\n  try {\n    if (!TMDB_CONFIG.API_KEY) {\n      // Return fallback data with direct poster URLs\n      return {\n        id: movieId,\n        title: 'Movie',\n        poster_path: MOVIE_POSTERS[movieId] ? MOVIE_POSTERS[movieId].split('/').pop() : null,\n        release_date: 'Unknown',\n        overview: 'No description available'\n      };\n    }\n\n    const response = await fetch(\n      `${TMDB_CONFIG.BASE_URL}${TMDB_ENDPOINTS.MOVIE}/${movieId}?api_key=${TMDB_CONFIG.API_KEY}&language=en-US`\n    );\n\n    if (!response.ok) {\n      throw new Error('Failed to fetch movie data');\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching movie data:', error);\n    // Return fallback data with direct poster URLs\n    return {\n      id: movieId,\n      title: 'Movie',\n      poster_path: MOVIE_POSTERS[movieId] ? MOVIE_POSTERS[movieId].split('/').pop() : null,\n      release_date: 'Unknown',\n      overview: 'No description available'\n    };\n  }\n};\n\n// Get movie poster URL\nexport const getMoviePosterUrl = (movieData, size = 'medium') => {\n  if (!movieData || !movieData.poster_path) {\n    return null;\n  }\n\n  // If we have a local poster image, use it\n  if (MOVIE_POSTERS[movieData.id] && MOVIE_POSTERS[movieData.id].startsWith('/')) {\n    return MOVIE_POSTERS[movieData.id];\n  }\n\n  // If we have a direct poster URL, use it\n  if (MOVIE_POSTERS[movieData.id]) {\n    return size === 'small' ? MOVIE_POSTERS[movieData.id].replace('/w500/', '/w200/') : MOVIE_POSTERS[movieData.id];\n  }\n\n  const baseUrl = size === 'small' ? TMDB_CONFIG.IMAGE_BASE_URL_SMALL : TMDB_CONFIG.IMAGE_BASE_URL;\n  return `${baseUrl}${movieData.poster_path}`;\n};\n\n// Search movies by title\nexport const searchMovies = async (query) => {\n  try {\n    if (!TMDB_CONFIG.API_KEY) {\n      return { results: [] };\n    }\n\n    const response = await fetch(\n      `${TMDB_CONFIG.BASE_URL}${TMDB_ENDPOINTS.SEARCH}?api_key=${TMDB_CONFIG.API_KEY}&language=en-US&query=${encodeURIComponent(query)}&page=1`\n    );\n\n    if (!response.ok) {\n      throw new Error('Failed to search movies');\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error('Error searching movies:', error);\n    return { results: [] };\n  }\n};\n","import React, { memo, useState, useEffect } from 'react';\nimport { COMPONENT_STYLES } from '../../constants/theme';\nimport { FAVORITE_MOVIES } from '../../constants/tmdb';\nimport { fetchMovieData, getMoviePosterUrl } from '../../utils/tmdb';\n\nconst FavoriteMovies = () => {\n  const [moviesData, setMoviesData] = useState({});\n\n  useEffect(() => {\n    const fetchMoviesData = async () => {\n      const data = {};\n      for (const movie of FAVORITE_MOVIES) {\n        data[movie.id] = await fetchMovieData(movie.id);\n      }\n      setMoviesData(data);\n    };\n\n    fetchMoviesData();\n  }, []);\n\n  const handleMovieClick = (tmdbUrl) => {\n    window.open(tmdbUrl, '_blank', 'noopener,noreferrer');\n  };\n\n  return (\n    <section id=\"favorite-movies\" className={COMPONENT_STYLES.section.base} aria-label=\"Favorite Movies section\">\n      <div className={COMPONENT_STYLES.section.container}>\n        <h2 className={COMPONENT_STYLES.section.heading}>Favorite Movies</h2>\n        <p className=\"text-black/70 text-sm mb-6\">\n          Movies beyond the mainstream.\n        </p>\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-6\">\n          {FAVORITE_MOVIES.map((movie) => {\n            const movieData = moviesData[movie.id];\n            const posterUrl = movieData ? getMoviePosterUrl(movieData, 'small') : null;\n            \n            return (\n              <div \n                key={movie.id}\n                onClick={() => handleMovieClick(movie.tmdbUrl)}\n                className=\"flex items-center space-x-6 p-8 bg-gray-100 rounded-lg hover:bg-gray-200 transition-colors cursor-pointer group min-h-[140px]\"\n              >\n                {posterUrl ? (\n                  <img \n                    src={posterUrl} \n                    alt={`${movie.name} poster`}\n                    className=\"w-24 h-24 rounded-lg object-contain shadow-sm bg-white\"\n                    onError={(e) => {\n                      e.target.style.display = 'none';\n                      e.target.nextSibling.style.display = 'flex';\n                    }}\n                  />\n                ) : null}\n                <div className={`w-24 h-24 bg-gray-200 rounded-lg flex items-center justify-center text-gray-700 text-3xl font-bold flex-shrink-0 ${posterUrl ? 'hidden' : 'flex'}`}>\n                  {movie.initials}\n                </div>\n                <div className=\"flex-1\">\n                  <h3 className=\"font-bold text-black text-xl mb-2\">{movie.name}</h3>\n                  <p className=\"text-gray-600 text-lg leading-relaxed\">{movie.description}</p>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default memo(FavoriteMovies);\n"],"names":["TMDB_CONFIG","process","REACT_APP_TMDB_API_KEY","FAVORITE_MOVIES","id","name","description","initials","tmdbUrl","year","TMDB_ENDPOINTS","MOVIE_POSTERS","fetchMovieData","async","movieId","title","poster_path","split","pop","release_date","overview","response","fetch","ok","Error","json","error","console","FavoriteMovies","moviesData","setMoviesData","useState","useEffect","data","movie","fetchMoviesData","_jsx","className","COMPONENT_STYLES","section","base","children","_jsxs","container","heading","map","movieData","posterUrl","size","arguments","length","undefined","startsWith","replace","getMoviePosterUrl","onClick","handleMovieClick","window","open","src","alt","onError","e","target","style","display","nextSibling","memo"],"sourceRoot":""}